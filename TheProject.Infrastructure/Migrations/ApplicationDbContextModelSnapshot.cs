// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheProject.Infrastructure.Data;

#nullable disable

namespace TheProject.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technology and Computer Science"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Business and Entrepreneurship"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Creative Arts and Design"
                        });
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Interested")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f9f3e8b-8fdd-4a38-b052-a5109123e2ab"),
                            CategoryId = 1,
                            Description = "Learn to build scalable web applications using React, Node.js, Express, and MongoDB.",
                            EndDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://img-b.udemycdn.com/course/750x422/2715276_2923_2.jpg",
                            Interested = 120,
                            StartDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Full Stack Web Development"
                        },
                        new
                        {
                            Id = new Guid("6663d89a-3f07-4bea-b4f4-dc8b47efe599"),
                            CategoryId = 1,
                            Description = "Dive into data science and machine learning with Python, exploring data visualization, machine learning models, and more.",
                            EndDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://media.geeksforgeeks.org/wp-content/uploads/20210629202956/DataV.png",
                            Interested = 150,
                            StartDate = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Data Science and Machine Learning"
                        },
                        new
                        {
                            Id = new Guid("412588b2-b00f-49dc-b261-04b65edfd9f3"),
                            CategoryId = 2,
                            Description = "Master digital marketing tools and strategies, including SEO, PPC, social media, and content marketing.",
                            EndDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://www.redbricksmedia.com/wp-content/uploads/2023/04/What-are-the-Advantages-of-Digital-Marketing.jpg",
                            Interested = 90,
                            StartDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Digital Marketing Essentials"
                        },
                        new
                        {
                            Id = new Guid("557a4fcd-1f84-4487-a7bd-8240327c976b"),
                            CategoryId = 3,
                            Description = "Explore the fundamentals of graphic design, including layout, composition, typography, and color theory.",
                            EndDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://i.ytimg.com/vi/YqQx75OPRa0/maxresdefault.jpg",
                            Interested = 110,
                            StartDate = new DateTime(2024, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Introduction to Graphic Design"
                        },
                        new
                        {
                            Id = new Guid("f5b840fe-cd8b-44e1-8c5e-5cdbec1d4a0f"),
                            CategoryId = 2,
                            Description = "Prepare for the PMP certification exam with this comprehensive course covering project management best practices.",
                            EndDate = new DateTime(2024, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://play-lh.googleusercontent.com/KO4qR1Yik54zkBEWKoVqbUtJqOAw2w6loHapeAaacDeBpy9lU7hM1fpNU-VN4kzRwpc",
                            Interested = 75,
                            StartDate = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Project Management Professional Certification Prep"
                        });
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b4f1363-8c03-48dc-bd08-fad9d4cc458b"),
                            Bio = "Expert in full stack development with over 10 years of experience.",
                            CourseId = new Guid("9f9f3e8b-8fdd-4a38-b052-a5109123e2ab"),
                            FirstName = "Angelina",
                            LastName = "Jolie",
                            Photo = "https://i.pinimg.com/736x/b7/5b/49/b75b49e64989d5b5944c80f302228e2e.jpg"
                        },
                        new
                        {
                            Id = new Guid("b7a54332-4904-4806-8aab-e27c64e59b24"),
                            Bio = "Data scientist specializing in machine learning and data visualization with over 8 years of experience.",
                            CourseId = new Guid("6663d89a-3f07-4bea-b4f4-dc8b47efe599"),
                            FirstName = "Scarlett",
                            LastName = "Johansson",
                            Photo = "https://englishtribuneimages.blob.core.windows.net/gallary-content/2023/4/2023_4$largeimg_1660471345.jpg"
                        },
                        new
                        {
                            Id = new Guid("538279e7-f060-422b-96ac-7fffa70832f1"),
                            Bio = "Digital marketing guru with a focus on SEO and social media strategy.",
                            CourseId = new Guid("412588b2-b00f-49dc-b261-04b65edfd9f3"),
                            FirstName = "Jennifer",
                            LastName = "Aniston",
                            Photo = "https://parade.com/.image/c_limit%2Ccs_srgb%2Cq_auto:good%2Cw_700/MTkwNTgxMDQyODUzMTkyODI5/jennifer-aniston-through-the-years.webp"
                        },
                        new
                        {
                            Id = new Guid("ff1a42d7-db91-437e-bc0f-5012f9a5d68f"),
                            Bio = "Renowned graphic designer with a passion for typography and brand identity.",
                            CourseId = new Guid("557a4fcd-1f84-4487-a7bd-8240327c976b"),
                            FirstName = "Margot",
                            LastName = "Robbie",
                            Photo = "https://media.vanityfair.com/photos/636bc27c672701552ac8f48b/master/w_1600,c_limit/1222_Margot_Robbie_embed02.jpg"
                        },
                        new
                        {
                            Id = new Guid("1be5e5fc-b0e4-4858-95df-27a1062ba57f"),
                            Bio = "Project management professional with extensive experience preparing candidates for the PMP® certification.",
                            CourseId = new Guid("f5b840fe-cd8b-44e1-8c5e-5cdbec1d4a0f"),
                            FirstName = "Emma",
                            LastName = "Watson",
                            Photo = "https://image.tmdb.org/t/p/original/A14lLCZYDhfYdBa0fFRpwMDiwRN.jpg"
                        });
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lectures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9ef67c8-b780-4837-b54a-70f722a28aec"),
                            CourseId = new Guid("9f9f3e8b-8fdd-4a38-b052-a5109123e2ab"),
                            Description = "Understanding the basics of web development with HTML and CSS.",
                            Duration = new TimeSpan(0, 2, 30, 0, 0),
                            StartDate = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Introduction to HTML and CSS"
                        },
                        new
                        {
                            Id = new Guid("fcf037a7-61a8-4113-b6e7-1d92bad5e3f3"),
                            CourseId = new Guid("9f9f3e8b-8fdd-4a38-b052-a5109123e2ab"),
                            Description = "Interactive web pages with JavaScript.",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            StartDate = new DateTime(2024, 1, 22, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "JavaScript and the Web"
                        },
                        new
                        {
                            Id = new Guid("7466e5fb-055a-4ad5-aa11-ec006c1b460c"),
                            CourseId = new Guid("6663d89a-3f07-4bea-b4f4-dc8b47efe599"),
                            Description = "Introduction to Python and its libraries for data science.",
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            StartDate = new DateTime(2024, 2, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Python for Data Science"
                        },
                        new
                        {
                            Id = new Guid("4d522ed8-8a34-4b60-9428-10d54c8d6a41"),
                            CourseId = new Guid("6663d89a-3f07-4bea-b4f4-dc8b47efe599"),
                            Description = "Analyzing data sets to summarize their main characteristics.",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            StartDate = new DateTime(2024, 2, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Exploratory Data Analysis"
                        },
                        new
                        {
                            Id = new Guid("3ad40bba-028b-4c83-b7c9-6822bc54964e"),
                            CourseId = new Guid("412588b2-b00f-49dc-b261-04b65edfd9f3"),
                            Description = "Learn the basics of Search Engine Optimization to increase your website visibility.",
                            Duration = new TimeSpan(0, 1, 15, 0, 0),
                            StartDate = new DateTime(2024, 3, 25, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "SEO Fundamentals"
                        },
                        new
                        {
                            Id = new Guid("0b252781-a615-4eaa-bae7-d55c78f627f2"),
                            CourseId = new Guid("412588b2-b00f-49dc-b261-04b65edfd9f3"),
                            Description = "Effective strategies for engaging with your audience on social media platforms.",
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            StartDate = new DateTime(2024, 4, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Social Media Marketing Strategies"
                        },
                        new
                        {
                            Id = new Guid("92a2077b-9b32-494e-9e7d-f7d01dca7d49"),
                            CourseId = new Guid("557a4fcd-1f84-4487-a7bd-8240327c976b"),
                            Description = "A deep dive into the core principles of graphic design, focusing on composition and layout.",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            StartDate = new DateTime(2024, 5, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Design Principles: Composition and Layout"
                        },
                        new
                        {
                            Id = new Guid("0d5de950-f96f-420f-bf37-ea70344170e4"),
                            CourseId = new Guid("557a4fcd-1f84-4487-a7bd-8240327c976b"),
                            Description = "Exploring the role of typography in graphic design and how to use it effectively.",
                            Duration = new TimeSpan(0, 5, 0, 0, 0),
                            StartDate = new DateTime(2024, 5, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Typography in Design"
                        },
                        new
                        {
                            Id = new Guid("14b4501c-6a83-4336-8f7e-0b546869d2c1"),
                            CourseId = new Guid("f5b840fe-cd8b-44e1-8c5e-5cdbec1d4a0f"),
                            Description = "Covering the fundamental concepts and terminologies of project management.",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            StartDate = new DateTime(2024, 6, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Project Management Basics"
                        },
                        new
                        {
                            Id = new Guid("56b480ea-be5b-4bdf-b8b6-6c2fa1c3d96b"),
                            CourseId = new Guid("f5b840fe-cd8b-44e1-8c5e-5cdbec1d4a0f"),
                            Description = "Strategies and tips for tackling the PMP certification exam.",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            StartDate = new DateTime(2024, 6, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Preparing for the PMP Exam"
                        });
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("529b45df-6480-4740-8781-080e1ab3fe10"),
                            CourseId = new Guid("9f9f3e8b-8fdd-4a38-b052-a5109123e2ab"),
                            Description = "A comprehensive course that offers deep insights into full stack development.",
                            Rating = 8,
                            UserId = "6b79f761-5a4e-4457-a53b-cfc7c36ab084"
                        },
                        new
                        {
                            Id = new Guid("67f65074-22ed-4b14-a668-e8a3d917e892"),
                            CourseId = new Guid("6663d89a-3f07-4bea-b4f4-dc8b47efe599"),
                            Description = "Excellent course on data science. Highly recommend for beginners and intermediates.",
                            Rating = 9,
                            UserId = "6c3438cd-8332-4e95-9a5e-adb64ec972d6"
                        },
                        new
                        {
                            Id = new Guid("836384e4-368d-4c34-8cec-7cad94caa3ac"),
                            CourseId = new Guid("412588b2-b00f-49dc-b261-04b65edfd9f3"),
                            Description = "Great insights into digital marketing strategies. Useful for all levels.",
                            Rating = 7,
                            UserId = "6c3438cd-8332-4e95-9a5e-adb64ec972d6"
                        },
                        new
                        {
                            Id = new Guid("f1f8bfa7-35fd-48a9-bc61-a9f0d9ff9ed5"),
                            CourseId = new Guid("557a4fcd-1f84-4487-a7bd-8240327c976b"),
                            Description = "Loved the practical approach to graphic design principles. The examples were very helpful.",
                            Rating = 6,
                            UserId = "addd0c13-6a3f-4706-afc8-219f5e89badd"
                        },
                        new
                        {
                            Id = new Guid("37fcca74-8e2f-40b5-8951-b341f5e1f268"),
                            CourseId = new Guid("f5b840fe-cd8b-44e1-8c5e-5cdbec1d4a0f"),
                            Description = "The PMP prep course was detailed and well-structured. It helped me pass the exam on the first try.",
                            Rating = 8,
                            UserId = "addd0c13-6a3f-4706-afc8-219f5e89badd"
                        },
                        new
                        {
                            Id = new Guid("33fd01ad-45d2-4d19-9c93-af5dda76377b"),
                            CourseId = new Guid("9f9f3e8b-8fdd-4a38-b052-a5109123e2ab"),
                            Description = "This course exceeded my expectations! The content was clear, and the projects were both challenging and rewarding.",
                            Rating = 10,
                            UserId = "addd0c13-6a3f-4706-afc8-219f5e89badd"
                        });
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0afe2b81-40c4-4ae7-9ebd-0ccaa1b0b64f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f50ea17-1fd9-477d-a90f-39a1e0378e25",
                            Email = "guest1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST1@GMAIL.COM",
                            NormalizedUserName = "guest1",
                            PasswordHash = "AQAAAAEAACcQAAAAEDXuDuFbY5HRReGHMqpZiBUk/inINj/ssZKMnjZeyaOsAd16ukhjyKUeGT1csN/2pA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63ac2c0d-1b91-49d8-8a41-d7b101d91040",
                            TwoFactorEnabled = false,
                            UserName = "guest1"
                        },
                        new
                        {
                            Id = "6b79f761-5a4e-4457-a53b-cfc7c36ab084",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35f710df-e7ba-432d-a41e-9b27ccfc0fed",
                            Email = "user1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "user1",
                            PasswordHash = "AQAAAAEAACcQAAAAEOF+gQJbeS2OOieILXAVnJHr1pYmg5WmOq2bDVGmDIivV0640I9KZf1DjQ1vsIdLHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0cbd5057-4e2f-45db-af0a-f5680a073d3b",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "6c3438cd-8332-4e95-9a5e-adb64ec972d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d11eedd-66e1-46c1-98e1-033e4e7f3ecb",
                            Email = "user2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "user2",
                            PasswordHash = "AQAAAAEAACcQAAAAECNhJ+tqamY7MgmhFRUZNyH5ij8EpKgZAFvbCOQg9lYo6Ljm1z47Pa0wT8AzfJ+RwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35600e75-4e67-489b-848c-a7b99eceb532",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "addd0c13-6a3f-4706-afc8-219f5e89badd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07131e56-50ad-4395-af2c-b9dc3046114b",
                            Email = "user3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "user3",
                            PasswordHash = "AQAAAAEAACcQAAAAEJadL++KpBx5OTB2FaujTiYfAs7pD91FxnenK3Q1BQIhQrIiXCpWIAsVuBIPcepeUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9723c8e0-588b-47d7-b1a3-941e7469efd2",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "2d64777e-f833-4eca-803b-8eb1b0670a5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75b882d4-1035-4a48-b5c1-3682b8084373",
                            Email = "admin1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@GMAIL.COM",
                            NormalizedUserName = "admin1",
                            PasswordHash = "AQAAAAEAACcQAAAAEJy1vXz39LjdeqsNJUXxgyJeTo0LTbniyGpt402aA84ZTVQ+xPrdMLFD1Vatr8Aeog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cbdf89f5-60b4-4e26-a448-d24308c46abc",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        });
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.UserCourse", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("UserCourse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TheProject.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TheProject.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheProject.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TheProject.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Course", b =>
                {
                    b.HasOne("TheProject.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Instructor", b =>
                {
                    b.HasOne("TheProject.Infrastructure.Data.Models.Course", "Course")
                        .WithOne("Instructor")
                        .HasForeignKey("TheProject.Infrastructure.Data.Models.Instructor", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Lecture", b =>
                {
                    b.HasOne("TheProject.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("TheProject.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheProject.Infrastructure.Data.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.UserCourse", b =>
                {
                    b.HasOne("TheProject.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheProject.Infrastructure.Data.Models.User", "User")
                        .WithMany("UsersCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.Course", b =>
                {
                    b.Navigation("Instructor")
                        .IsRequired();

                    b.Navigation("Lectures");

                    b.Navigation("Reviews");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("TheProject.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("UsersCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
